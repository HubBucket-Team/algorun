{
   	"manifest_version": "1.3",
	"algo_name": "SAMtools", // the name of your algorithm
	"algo_summary": "SAM (Sequence Alignment/Map) format is a generic format for storing large nucleotide sequence alignments. ", // a 1-line summary of your algorithm
	"algo_description": "Samtools is a set of utilities that manipulate alignments in the BAM format. It imports from and exports to the SAM (Sequence Alignment/Map) format, does sorting, merging and indexing, and allows to retrieve reads in any regions swiftly. Samtools is designed to work on a stream. It regards an input file `-' as the standard input (stdin) and an output file `-' as the standard output (stdout). Several commands can thus be combined with Unix pipes. Samtools always output warning and error messages to the standard error output (stderr). Samtools is also able to open a BAM (not SAM) file on a remote FTP or HTTP server if the BAM file name starts with `ftp://' or `http://'. Samtools checks the current working directory for the index file and will download the index upon absence. Samtools does not retrieve the entire alignment file unless it is asked to do so. ", // a few lines description of your algorithm (basic html accepted)
	"algo_website": "samtools.sourceforge.net", // url where users can find more information about your algorithm
	"algo_keywords": [], // a list of keywords describing your algorithm
	"published_paper": { // if you already have a published paper for your algorithm. leave blank if not.
            "title": "",
            "url": ""
    	},
	"algo_authors": [ // a list of all the algorithm's authors
		{
			"name": "Heng Li",
			"email": "lh3@me.com", // make sure you have a gravatar (http://gravatar.com)
            "profile_picture": "", // if you don't have a gravatar, put a profile picture in algorun_info folder and refer to it here
			"personal_website": "lh3lh3.users.sourceforge.net", // leave "" if not available
			"organization": "Broad Institute", // leave "" if not available
			"org_website": "https://www.broadinstitute.org/" // leave "" if not available
		}
	],
	"algo_packager": { // the one who packaged the algorithm into AlgoRun container.
            "name": "Nicholas Monteleone",
            "email": "nicholas.monteleone@uconn.edu",
            "personal_website": "N/A",
            "profile_picture": "",
            "organization": "University of Connecticut Health Center", 
            "org_website": "http://health.uconn.edu/" 
    },
	"algo_exec": "sh samtools.sh", // the command to start algorithm execution. AlgoRun passes the input file as the first argument
	"algo_input_stream": "file", // "file" if the algorithm reads input from a file (filename is passed as the first command line argument), "direct" if the algorithm input is passed directly as a parameter in the command line, or "stdin" if input is passed through stdin using '<'. Default: direct
    "algo_output_stream": "result.txt", // path of the file where your algorithm outputs its results or "stdout" if your algorithm prints the results to the standard output stream. Default: stdout
	"algo_parameters": { // list all the parameters available for your algorithm. These parameters will be available for use in your algorithm as environment variables.
		"COMMAND": "faidx"
	},
	"input_type": "algorun:custom", // if your algorithm is compatible with other algorithms on AlgoRun, mention the input type it accepts here. Example: "algorun:superadam". leave the default value otherwise.
    "output_type": "algorun:custom", // if your algorithm is compatible with other algorithms on AlgoRun, mention the output type it produces here. Example: "algorun:superadam". leave the default value otherwise.
	"algo_image": "" // Example: "ahosny/react". leave "" if you did not upload your algorithm to docker hub or if you do not know what docker hub is :).
}

